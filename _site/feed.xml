<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zachary</title>
    <description>Hi，我是 Zachary，一名 iOS 开发者，欢迎来到我的博客。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 28 Jan 2021 00:27:45 +0800</pubDate>
    <lastBuildDate>Thu, 28 Jan 2021 00:27:45 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>程序的机器级表示(二)</title>
        <description>&lt;h3 id=&quot;数据格式&quot;&gt;数据格式&lt;/h3&gt;
&lt;p&gt;Intel 术语：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;位为&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;字节（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位数据类型为字（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位为双字（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位为四字（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;c-声明--------------intel-数据类型-------------汇编代码后缀--------------大小字节&quot;&gt;C 声明          |    Intel 数据类型     |        汇编代码后缀         |     大小（字节）&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;字节&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;short&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;字&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;双字&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;long&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;四字&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;四字&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;单精度&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;双精度&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;大多数&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;生成汇编代码指令都有一个字符后缀表示操作数的大小，汇编代码也使用&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;表示&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;字节整数和&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;字节双精度&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movb&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;传送字节&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movw&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;传送字&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;传送双字&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movq&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;传送四字&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;访问信息&quot;&gt;访问信息&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;一个&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x86&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;包含一组&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个存储&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位值的通用目的寄存器，他们用了存储整数数据和指针&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;指令可以对这个-16-个寄存器的低位字节中存放的不同大小的数据进行操作-字节级操作可以访问最低的字节&quot;&gt;指令可以对这个 16 个寄存器的低位字节中存放的不同大小的数据进行操作 字节级操作可以访问最低的字节&lt;/h4&gt;
&lt;h4 id=&quot;指令会复制和生成-1-字节2-字节4-字节和-8-字节值&quot;&gt;指令会复制、和生成 1 字节、2 字节、4 字节和 8 字节值&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;生成&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;字节和&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;字节数字的指令会保持剩下的字节不变&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;生成&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;字节的指令会把高位&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个字节置为&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;16-个整数寄存器&quot;&gt;16 个整数寄存器&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;               &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;al&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;返回值&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebx&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bx&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bl&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;被调用者保存&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecx&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cx&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;第&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个参数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edx&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;第&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个参数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsi&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esi&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;si&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sil&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;第&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个参数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdi&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edi&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dil&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;第&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个参数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbp&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebp&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpl&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;被调用者保存&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spl&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;栈指针&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r8&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r8d&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r8w&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r8b&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;第&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个参数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9d&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9w&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r9b&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;第&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个参数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r10&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r10d&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r10w&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r10b&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;调用者保存&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11d&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11w&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r11b&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;调用者保存&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r12&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r12d&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r12w&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r12b&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;被调用者保存&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r13&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r13d&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r13w&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r13b&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;被调用者保存&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r14&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r14d&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r14w&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r14b&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;被调用者保存&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r15&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r15d&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r15w&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r15b&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;被调用者保存&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;栈指针&quot;&gt;栈指针&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;在常见的程序里不同的寄存器扮演不同的角色&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;其中最特别的是&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指明运行时栈的结束位置&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;操作数指示符&quot;&gt;操作数指示符&lt;/h4&gt;
&lt;p&gt;大多数指令有一个或多个操作数，指示出执行一个操作中要使用的源数据值，以及放置结果的目的位置。
源数据值可以以常数形式给出或从寄存器或内存中读出。结果可以存放在寄存器或内存中。
不同的操作数分为三种：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;立即数，用来表示常数值，$后跟一个标准 C 表示的整数 例如 $0x1F&lt;/li&gt;
  &lt;li&gt;寄存器，它表示某个寄存器的内容，用 r(a) 表示任意寄存器，用引用 R[r(a)] 表示它的值，这是将寄存器集合看成一个数组 R ，用寄存器标示符作为索引&lt;/li&gt;
  &lt;li&gt;内存引用，他会根据计算出来的地址(通常称为有效地址)访问某个内存位置，因为将内存看成一个字节数组所以用 M(b)[Addr] 表示对存储在
内存中从地址 Addr开始 b 个字节值得引用。通常省略 b 为 M[Addr]&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;多种不同寻址模式&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Imm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;表示最常见的形式&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Imm&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;立即数偏移&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;基址寄存器，必须是&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位寄存器&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ri&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;变址寄存器，必须是&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位寄存器&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;比例因子，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;必须是&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;有效地址为&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Imm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;寄存器&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;值&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;     &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;地址&lt;/span&gt;        &lt;span class=&quot;err&quot;&gt;值&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;     &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值为&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的值为&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;取地址，&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;取地址的内容也就是值&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;操作数&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;值&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;              &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;寄存器&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x104&lt;/span&gt;             &lt;span class=&quot;mh&quot;&gt;0xAB&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;绝对地址&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$0x108&lt;/span&gt;            &lt;span class=&quot;mh&quot;&gt;0x108&lt;/span&gt;      &lt;span class=&quot;err&quot;&gt;立即数&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;间接地址&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;取&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;地址值对应的内容&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;mh&quot;&gt;0xAB&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;基址&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;偏移量&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x104&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xAB&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;变址寻址&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x13&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;变址寻址&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x104&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x108&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xFC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;比例寻址&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;比例寻址&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;数据传送指令&quot;&gt;数据传送指令&lt;/h4&gt;
&lt;p&gt;最频繁使用的指令是将数据从一个位置复制到另一个位置的指令，它们或者源和目的类型不同，或者执行的转换不同，
或者具有一些副作用
把许多不同指令划分为指令类，每一类中的指令执行相同的操作，只不过操作数大小不同&lt;/p&gt;
&lt;h3 id=&quot;例如mov-把数据从源位置复制到目的位置不做任何变化&quot;&gt;例如，MOV 把数据从源位置复制到目的位置，不做任何变化。&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;movb&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;传送字节&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movw&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;传送字&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;传送双字&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movq&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;传送四字&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;源操作数可以是立即数、寄存器、内存地址。目的操作数是寄存器或内存地址&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x86&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;有个限制&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;将一个值从内存位置复制到另一个内存位置需要两条指令，第一条指令将源值加载到寄存器，第二条将寄存器值写入目的位置。寄存器大小必须与&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;末尾的字符（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）一致。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指令只会更新目的操作数指定的那个寄存器字节或内存位置。唯一例外的是&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;以寄存器作为目的时，会把该寄存器高位&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;字节设置为&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这是&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x86&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的惯例，即任何寄存器生成&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位指令都会把该寄存器高位部分设置成&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;movabsq 能以任意 64 位立即数作为源操作数，并且只能以寄存器作为目的
常规 mov 指令只能以 32 位补码数字的立即数作为源操作数，然后把这个值符号扩展到 64 位的值放到目的位置&lt;/p&gt;

&lt;h4 id=&quot;将较小的源值复制到较大的目的使用指令-movzmovs把数据从源寄存器或内存复制到目的寄存器&quot;&gt;将较小的源值复制到较大的目的使用指令 MOVZ、MOVS，把数据从源（寄存器或内存）复制到目的寄存器&lt;/h4&gt;
&lt;h4 id=&quot;movz-类中指令把目的中剩余的字节填充为-0movzbw结尾-b-表示源大小w-表示目的大小&quot;&gt;MOVZ 类中指令把目的中剩余的字节填充为 0，movzbw，结尾 b 表示源大小，w 表示目的大小&lt;/h4&gt;
&lt;h4 id=&quot;movs-类中指令通过符号扩展来填充把源操作的最高位进行复制&quot;&gt;MOVS 类中指令通过符号扩展来填充把源操作的最高位进行复制&lt;/h4&gt;
&lt;h4 id=&quot;cltq-指令总是以-eax-作为源-rax-作为目的-它的效果与-movslq-eax-rax-一样&quot;&gt;cltq 指令总是以 %eax 作为源 %rax 作为目的 它的效果与 movslq %eax, %rax 一样&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;所谓&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指针其实&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;就是地址，间接引用指针就是&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 将指针放在一个寄存器中 然后在内存引用中使用这个寄存器
long *xp 的, *xp 就是 (%rdi), xp 地址放在 %rdi 中, * 就是间接引用&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;压入和弹出栈&quot;&gt;压入和弹出栈&lt;/h3&gt;
&lt;p&gt;通过 push 操作将数据压入程序栈中
通过 pop 操作从程序栈中弹出数据(删除数据)，弹出的值永远是最近被压入而且乃然在栈中的值
栈可以实现为一个数组，总是从数组一端插入和删除元素 这一端被称为栈顶
栈向下增长，栈顶元素地址是所有栈中地址中最低的
在 x86-64 中 栈向低地址方向增长，所以压栈是减小栈指针 %rsp 的值 并将数据存放到内存中，
出栈是从内存中读数据 并增加栈指针的值.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;保存着栈顶元素地址&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;当-rsp-为-0x108rax-为-0x123-时&quot;&gt;当 %rsp 为 0x108，%rax 为 0x123 时&lt;/h3&gt;

&lt;h4 id=&quot;压入&quot;&gt;压入&lt;/h4&gt;
&lt;p&gt;执行 pushq %rbp ，将一个 4 字值压入栈中 首先将栈指针减 8 (0x108-&amp;gt;0x100) 得到 0x100，然后将 0x123 存入0x100位置
pushq 一个字节，上边的两步是 8 个字节。
因此 pushq %rbp 行为等于&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;subq $8, %rsp          减 8 栈指针&lt;/li&gt;
  &lt;li&gt;movq %rbp, (%rsp)      将值存到栈顶&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;弹出&quot;&gt;弹出&lt;/h4&gt;
&lt;p&gt;弹出一个 4 字的操作包括从栈顶位置读出数据，然后将栈指针 (%rsp) 加 8。
popq %rdx ，首先从内存读出 0x123 的值，再写到寄存器 rdx，然后 %rsp 的值将增加回到 0x108。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;值&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x123&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;仍然会保存在内存位置&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位置&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;直到被覆盖，&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;总是指向栈顶&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;因此 popq %rdx 等价于以下步骤&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;movq (%rsp), %rax    读取 %rax 从栈中&lt;/li&gt;
  &lt;li&gt;addq $8, %rsp        加 8 栈指针&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 27 Jan 2021 22:45:30 +0800</pubDate>
        <link>http://localhost:4000/2021/01/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA(%E4%BA%8C)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA(%E4%BA%8C)/</guid>
        
        <category>CSApp</category>
        
        
      </item>
    
      <item>
        <title>程序的机器级表示(一)</title>
        <description>&lt;h3 id=&quot;机器代码&quot;&gt;机器代码&lt;/h3&gt;
&lt;p&gt;有时指目标代码，有时指文本格式的汇编代码。ARM 是 Acorn RISC Machine 的缩写。RISC 精简指令集计算机。
汇编代码表示非常接近机器代码 与机器代码的二进制相比 具有更好的可读性文本格式&lt;/p&gt;
&lt;h4 id=&quot;对机器编程来说其中两种抽象尤为重要&quot;&gt;对机器编程来说其中两种抽象尤为重要：&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;由指令集体系结构或指令架构(Instruction Set Architecture，ISA) 来定义机器级程序的格式和行为，它定义了处理器状态，指令的格式以及每条指令对状态的影响，大多数 ISA 将程序的行为描述成好像每条指令都是按顺序执行的，一条指令结束下一条再开始。处理器硬件远比描述的精细复杂，他们并发地执行许多指，但是可以采取措施保证整体行为与 ISA 指定的顺序完全一致&lt;/li&gt;
  &lt;li&gt;机器级程序使用的内存地址是虚拟地址，提供的内存模型看上去是一个非常大的字节数组&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;机器编程的基本原理主要思想是通过访问寄存器到的一些状态&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;其实&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;就是&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;编译器，可以用&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;启动&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;处理器状态&quot;&gt;处理器状态&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;程序计数器（通常称为 PC）在 x86-64 中用 %rip 表示，给出将要执行的下一条指令在内存中的地址&lt;/li&gt;
  &lt;li&gt;整数寄存器文件包含 16 个命名位置，分别存储 64 位的值，这些寄存器可以存储地址(类似 c 指针)或整数数据，
有些寄存器用来记录某些重要的程序状态
其他的寄存器用来保存临时数据，如过程的参数和局部变量 以及函数返回值&lt;/li&gt;
  &lt;li&gt;条件码寄存器保存着最近执行的算术或逻辑指令的状态和信息，用来实现控制或数据流中的条件变化 如 if、while&lt;/li&gt;
  &lt;li&gt;一组向量寄存器可以存放一个或多个整数或浮点数的值&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;内存&quot;&gt;内存&lt;/h3&gt;
&lt;p&gt;内存实际是用不同方式实现的虚构对象，操作系统和硬件之间存在一种协作称为虚拟内存，让每个程序看起来像有自己独立的字节数组&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;没有操作缓存的指令，你无法之间访问缓存&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;内存是你可以逻辑的认为只是一个字节数组，这就是机器级程序员看到的&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;生成程序的过程&quot;&gt;生成程序的过程&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;采用 C 并实际生成汇编代码 （编译 gcc -Og -S）&lt;/li&gt;
  &lt;li&gt;通过汇编程序运行它，接受文本表示的指令并将其转换为实际的字节形式 （汇编 gcc or as）&lt;/li&gt;
  &lt;li&gt;链接器将不同文件融合在一起，包含你的单独文件 （Linker gcc or ld）&lt;/li&gt;
  &lt;li&gt;实际运行程序时，有一些库在程序首次开始时动态导入&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;机器代码重要的一点就是程序计数器&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;告诉你&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;下一个指令是什么&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;下一个指令在内存中的位置&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;然后有一组寄存器供使用，可以把它们看成非常小的内存位置&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;介绍几个指令&quot;&gt;介绍几个指令&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;pushq 将东西推到栈中&lt;/li&gt;
  &lt;li&gt;mov 将它从一个地方复制到另一个地方&lt;/li&gt;
  &lt;li&gt;call 调用&lt;/li&gt;
  &lt;li&gt;pop pushq 的反操作&lt;/li&gt;
  &lt;li&gt;ret 从一个函数返回&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;生成汇编&quot;&gt;生成汇编&lt;/h3&gt;
&lt;p&gt;$ gcc -Og -S sum.c （将 c 代码转化为汇编生成 sum.s 调用 gcc 是调用整个编译序列）&lt;/p&gt;
&lt;h4 id=&quot;参数&quot;&gt;参数：&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;-S stop 只做第一部，把 c 转为汇编&lt;/li&gt;
  &lt;li&gt;-Og 告诉编译器做什么优化规范，如果什么都不加 会产出无优化过的代码，非常难读&lt;/li&gt;
  &lt;li&gt;-O1 打开优化器&lt;/li&gt;
  &lt;li&gt;-O2 打开优化器&lt;/li&gt;
  &lt;li&gt;-O Optimize&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;都是汇编文件&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;后缀是反汇编文件&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;汇编与-c-有什么不同&quot;&gt;汇编与 C 有什么不同？&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;汇编有很多不同类型的整数数据类型，有 1、2、4、8 字节的&lt;/li&gt;
  &lt;li&gt;在整数数据类型中它们不区分有符号与无符号的存储方式，甚至地址或指针都是以数字形式在计算机中存储的&lt;/li&gt;
  &lt;li&gt;浮点数以非常不同的方式处理事宜不同的寄存器组&lt;/li&gt;
  &lt;li&gt;x86 下有的指令只有 1 个字节，有的可能最多 15 字节&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;数组和结构体不存在于机器语言&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;反汇编&quot;&gt;反汇编&lt;/h3&gt;
&lt;p&gt;将工程从目标代码转回到汇编代码，会有所丢失跟正常的汇编代码有些不同&lt;/p&gt;
&lt;h4 id=&quot;-gcc--og-sumc--o-sum-sum-是一个二进制&quot;&gt;$ gcc -Og sum.c -o sum (sum 是一个二进制)&lt;/h4&gt;
&lt;h4 id=&quot;-objdump--d-sum--sumd-会输出程序的反汇编结果&quot;&gt;$ objdump -d sum &amp;gt; sum.d (会输出程序的反汇编结果)&lt;/h4&gt;
&lt;h4 id=&quot;所有以开头的行都是指导汇编器和链接器工作的伪指令-可以忽略&quot;&gt;所有以“.”开头的行都是指导汇编器和链接器工作的伪指令 可以忽略&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;callq&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multstore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;retq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;反汇编代码会省略指令后边的 “q” 如 pushq 变成 push，但 call 和 ret 指令后会加 “q” 变成 callq，retq&lt;/p&gt;

&lt;h3 id=&quot;链接器&quot;&gt;链接器&lt;/h3&gt;
&lt;p&gt;链接器将地址显示了出来 如第四行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;callq&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;40058&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mult2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbx&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;retq&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nop&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;链接器的作用之一就是为函数调用找到匹配的函数可执行代码的位置&quot;&gt;链接器的作用之一就是为函数调用找到匹配的函数可执行代码的位置&lt;/h4&gt;
&lt;h4 id=&quot;反汇编可能生成-nop-指令-但如果在-ret-后就不影响-因为函数已经-return-如第-89行&quot;&gt;反汇编可能生成 nop 指令 但如果在 ret 后就不影响 因为函数已经 return 如第 8、9行&lt;/h4&gt;

&lt;h3 id=&quot;gdb-调试&quot;&gt;GDB 调试&lt;/h3&gt;
&lt;p&gt;(gdb)disassemble sumstore （sumstore 是个函数，输出 sumstore 反汇编代码，multstore.o 文件）&lt;/p&gt;
&lt;h4 id=&quot;x14xb-sumstore&quot;&gt;x/14xb sumstore&lt;/h4&gt;
&lt;h4 id=&quot;x-表示从函数-multstore-所处的地址开始的-14-个十六进制格式表示-简写-x的字节简写-b&quot;&gt;x 表示从函数 multstore 所处的地址开始的 14 个十六进制格式表示 (简写 x)的字节(简写 b)&lt;/h4&gt;

&lt;h3 id=&quot;寄存器&quot;&gt;寄存器&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;使用&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;版本将得到&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;使用&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;版本将得到&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位，&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;版本只是&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;版本的实体的低&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;是栈指针&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;不把它作为任何旧用途&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;是&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 07 Jan 2021 21:45:30 +0800</pubDate>
        <link>http://localhost:4000/2021/01/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA(%E4%B8%80)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA(%E4%B8%80)/</guid>
        
        <category>CSApp</category>
        
        
      </item>
    
      <item>
        <title>Advancements in the objective C runtime</title>
        <description>&lt;p&gt;距离 WWDC2020 过了也快小半年，换了新工作，由于前段时间项目比较忙事情比较多也没有太多时间更新。
不过最近节奏还可以抽空把 WWDC2020 自己感兴趣的内容记录一下。
书归正传, 开始今天的话题，也就是 Objective-C runtime 变化。&lt;/p&gt;

&lt;h4 id=&quot;一三大变化&quot;&gt;一、三大变化&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;类的运行时数据结构变化&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;方法列表变化&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tagged&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pointer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;格式变化&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;二clean-memory-和-dirty-memory&quot;&gt;二、clean memory 和 dirty memory&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;这次优化都是围绕&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;和&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;clean memory 指加载后不会发生更改的内存，class_ro_t 就是 clean memory 因为它是只读的。
clean memory 可以移除，如果你需要再从磁盘中重新加载。&lt;/p&gt;

&lt;p&gt;dirty memory 指在进程运行时会发生更改的内存，例如创建一个新的方法缓存并从类中指向它，class_rw_t 就是 dirty memeory。
dirty memory 比 clean memory 代价昂贵，只要进程在运行 它就必须一直存在。&lt;/p&gt;

&lt;h4 id=&quot;三类的运行时数据结构变化&quot;&gt;三、类的运行时数据结构变化&lt;/h4&gt;
&lt;p&gt;类结构有指向元类，超类和方法缓存的指针, 还有一个指针指向更多数据 class_ro_t，swift 和 oc 使用一样的底层基础结构。&lt;/p&gt;

&lt;p&gt;当一个类首次被使用 运行时会为它分配额外的存储容量，也就是 class_rw_t 用于读取-编写数据, class_rw_t 中存储了只有在运行时才会生成的信息, 所有类都会链接成一个数状结构，这是通过使用 First Subclass 和 Next Sibling Class 指针实现，这允许运行时遍历当前使用的所有类，追踪使用类的信息，这对于方法缓存无效非常有用。&lt;/p&gt;

&lt;p&gt;只有 swift 类会使用 demangled name 字段, swift 一般不需要这个字段，除非有东西询问它们的 OC 名称时候才需要，所以可以拆掉平时不用的部分, 从而减少 class_rw_t 大小。&lt;/p&gt;

&lt;p&gt;根据苹果给出的数据，大约 90% 的类从来不需要这些扩展数据，在系统范围内可节省大约 14 MB。&lt;/p&gt;

&lt;p&gt;你可以运行一个命令，在任何 mac 上都有，叫 heap。heap 允许你检查正在运行的进程所使用的堆内存。
$heap Mail | egrep ‘class_rw|COUNT’&lt;/p&gt;

&lt;p&gt;于是 class_rw_ext_t 出现了，它节省了 dirty memory 的大小
现在很多从类中获取数据的代码，必须同时处理那些有扩展和没有扩展（class_rw_ext_t）数据的类，当然运行时会为你想往常一样处理一切，从外部看和往常一样，只是使用更少的内存。任何试图直接访问这些数据结构的代码，都将在今年停止工作。&lt;/p&gt;

&lt;h4 id=&quot;四方法列表变化&quot;&gt;四、方法列表变化&lt;/h4&gt;
&lt;p&gt;每个方法都包含 3 个信息&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;方法名称或叫选择器，选择器是&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;具有唯一性，所以他们可以使用指针相当来比较。&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;方法类型编码&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这是表示参数和返回值的字符串，是运行时和消息转发所必需的。&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;指向方法实现的指针，方法实际代码，当你写一个方法时候&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;会被编译成一个&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;函数。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以 init 为例子：
有三个方法表条目，每一个都是一个指针 所以在 64 位 就是 8+8+8 = 24 字节。
相当于每个方法表条目占 24 字节, 属于 clean memory 它并不是免费的，它必须从磁盘中加载并且使用时会占用内存。
虚拟地址空间它需要 64 位来寻址, 在这个地址内存中分了几个部分堆、栈，可执行文件和库二进制图像。而二进制图像可以加载到内存中任何位置，这取决于动态链接器决定把它放在哪里,  这意味着链接器需要将指针解析到图像中，并在加载时将其修正为指向其在内存中的实际位置，这也是有代价的。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;一个来自二进制文件的类方法条目&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;永远只指向该二进制文件内的方法实现，不可能使一个方法的元数据存在于一个二进制文件中，而实现它的代码在另一个二进制文件中。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;这意味着方法列表条目实际上不需要能够引用整个&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;为地址空间，它只要能引用自己的二进制中的函数，而这些函数总是在附近的&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;因此&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;无需使用绝对的&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位地址，它们可以使用&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位的相对偏移。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样做的好处：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;偏移量总是相同的&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;不管镜像在哪里加载到内存中，所以他们从磁盘加载后不需要进行修正，而由于他们不需要修正了所以他们可以存储在真正的只读内存中这样更安全，当然使用&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位偏移&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;意味着将&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位内存量减少了一半。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;在一台经典&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iPhone&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中系统范围内测量了大约&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的这些方法，他们的尺寸节省了&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzling&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;二进制中的方法列表，现在不能引用完整的地址空间，但如果你&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzling&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;一个方法它就可以在任何地方实施&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;而且苹果希望保持这些方法列表为只读&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;所以创建了一个全局表，这全局表将方法映射到它们被&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzle&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的实施上。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;swizzle&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;用的相对较少，所以全局表最终变化不会很大，内存每次都是按页面来&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“弄脏”。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;使用旧的方法列表&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzle&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;一个方法会&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“弄脏”&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;它所在的整个页面，一次&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swizzle&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;就会导致产生千字节的&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;有了整个全局表&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;我们只需要位一个额外的表的条目付出代价&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;但一切都会按照和以前一样运行。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;这些相对的方法列表&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;在新的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;版本上是受支持的&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macOS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Big&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sur&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvOS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchOS7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;当你使用相应的最小部署&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;进行构建时候&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;工具会自动在你的二进制文件中生成相对方法列表。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;如果你需要针对旧的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;版本的方法列表也不用担心，&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Xcode&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;也会生成旧方式的方法列表格式，系统可以在同一个&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;支持新旧两种方式的方法列表&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;不过如果你针对&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macOS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Big&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sur&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvOS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchOS7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;进行部署构建&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;，你的二进制文件会变小&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;而且使用的内存也会变少。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;最小部署&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;不仅仅关系到你有哪些&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SDK&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;可以使用&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;如果&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Xcode&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;知道不需要支持旧的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;版本，那它可以发布更好的优化代码或数据。&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;有一个事情注意，使用一个比你打算使用的更新的部署目标进行构建，&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Xcode&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;一般会阻止这种&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;但也可能漏掉，比如你在其他地方构建自己的库或框架然后把它带进来&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;在旧的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;中运行时&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;可能造成&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;旧的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;对新的一无所知&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;旧方式试图基于指针的方法来解释他们，意味着&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;它将尝试把一对&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位的字段作为&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位的指针来读取，这样的结果是两个整数作为一个指针粘在一起，这样就会造成&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;这个时候&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;坏指针就像两个&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;值平滑在一起&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;所以如果对数据进行挖掘的话，就会有问题&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;推荐总是使用&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;提供的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，如&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method_getName&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;等。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;五tagged-pointer&quot;&gt;五、Tagged Pointer&lt;/h4&gt;
&lt;p&gt;由于对齐要求 低位始终为 0
在 Inter 平台低位为标志位：
对象总在指针大小倍数的一个地址中, 由于地址空间有限高位始终为 0，实际上不会用到 2^64, 高位和低位总是 0，选择一位并把它们设置为 1 ，可以让我们知道它不是一个指针，这些值实际上是通过与进程启动时初始化的随机值相结合而被混淆的。&lt;/p&gt;

&lt;p&gt;低位设置为 1 表示 Tagged Pointer，接下来 3 位是标签号，用来表示 Tagged Pointer 类型， 如 3 表示它是一个 NSNumber， 6 为 NSDate，由于有 3 个标签位 所以有 8 种可能的标签类型，剩下的位是有效负载 payload ，这是特定类型可以随意使用的数据，对于 NSNumber 有些特殊 使用额外 8 位来作为扩展标签 来编码类型，但是会减少 payload 空间。&lt;/p&gt;

&lt;p&gt;在 ARM 平台高位为标志位：
高位 1 位 Tagged Pointer ，同 Inter 平台一样，也是有扩展标签的。
为什么 ARM 平台是高位为 1 ？这是对 objc_msgSend 的一个小优化, 苹果希望 msgSend 中最常见的路径可以尽可能的快，而最常见的路径是一个普通指针。
当使用高位时候 可以通过一次比较对这两个进行检查。
if (ptrValue &amp;lt;= 0) is Tagged Pointer Or nil，相对于两个分支检查 nil 和 tagged 这样就节省了一个条件分支。&lt;/p&gt;

&lt;p&gt;2020 改变&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;标签位保持在最高位，这样做高位还是为了&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgSend&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;优化&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;标签号现在移到了最小边&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个位&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;扩展标签随在标签位后。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;现有工具&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;比如动态链接&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;会忽略普通指针前&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这是由于&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;一个名为&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Top&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ignore&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARM&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;特性，苹果会把扩展标签放在&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Top&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Byte&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ignore&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位。&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;对于一个对齐的指针&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;底部&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;个位总是&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，但我们可以改变这点&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;只要通过在指针上添加一个小数字，我们将添加&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;将低位设置为&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;表示这是一个扩展标签，这意味着可以将上面的这个指针放入一个扩展标签指针有效负载中，这个结果是一个&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tagged&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pointer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;以及其有效负载中包含一个正常指针，它开启了&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tagged&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pointer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;能力&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;引用二进制文件中的常量数据能力，如字符串或其他数据结构，否则他们将不得不占用&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;六总结&quot;&gt;六、总结&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;你不需做什么就能获得改进，如果说要做应该只是最小部署的问题&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;不要直接读取内部的位，总是使用苹果的&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 15 Nov 2020 21:23:30 +0800</pubDate>
        <link>http://localhost:4000/2020/11/Advancements-in-the-Objective-C-runtime/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/11/Advancements-in-the-Objective-C-runtime/</guid>
        
        <category>iOS WWDC</category>
        
        
      </item>
    
      <item>
        <title>使用 jekyll 搭建博客总结</title>
        <description>&lt;p&gt;首先感谢喵神分享的模板. 自己的博客终于搭建完成了.
开博客的目的其一是为了记录下自己的学习历程，其二为了写一些自己感兴趣的东西.
书归正传, 开始搭建步骤:&lt;/p&gt;

&lt;h4 id=&quot;一-创建-githubio-库&quot;&gt;一 创建 github.io 库&lt;/h4&gt;
&lt;p&gt;这个比较简单一帆风顺, github 也有教程.&lt;/p&gt;

&lt;h4 id=&quot;二-安装-jekyll&quot;&gt;二 安装 jekyll&lt;/h4&gt;
&lt;p&gt;按照官网的 &lt;a href=&quot;http://jekyllcn.com/docs/quickstart/&quot;&gt;快速开始&lt;/a&gt; 按照即可. 若自己的电脑环境有问题如 bundler 未安装, 参考以下步骤解决:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;安装完 bundler 后便可继续创建博客:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;博客名称&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;三-模板选择&quot;&gt;三 模板选择&lt;/h4&gt;
&lt;p&gt;可以使用默认模板, 也可以使用别人开发好的模板, 我这里使用的是喵神开发的模板. clone 模板到自己的博客仓库, 对 _config.yml 文件进行修改, 修改成自己想要的样式
然后把本地仓库推送到自己创建的 github 仓库中即可.&lt;/p&gt;

&lt;h4 id=&quot;四-申请域名&quot;&gt;四 申请域名&lt;/h4&gt;
&lt;p&gt;若觉得 github.io 的域名太长不好记, 可以自己申请想要的域名.
这里是笔者购买域名的&lt;a href=&quot;https://porkbun.com/&quot;&gt;站点&lt;/a&gt;.
若不喜欢 porkbun 可以到 &lt;a href=&quot;https://www.domcomp.com/&quot;&gt;domcomp&lt;/a&gt; 进行对比挑选自己喜欢的站点进行购买.&lt;/p&gt;

&lt;h4 id=&quot;五-调试&quot;&gt;五 调试&lt;/h4&gt;
&lt;p&gt;文章可以放在 _posts 文件夹下, 可通过以下命令进行本地调试预览:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;六-参考链接&quot;&gt;六 参考链接&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;jekyll 文档&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 15 Jun 2020 23:20:26 +0800</pubDate>
        <link>http://localhost:4000/2020/06/%E4%BD%BF%E7%94%A8-jekyll-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/%E4%BD%BF%E7%94%A8-jekyll-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/</guid>
        
        
      </item>
    
  </channel>
</rss>
