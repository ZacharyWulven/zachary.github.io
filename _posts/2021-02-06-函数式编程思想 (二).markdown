---
layout: post
title: ### 函数式编程思想 (二)
date: 2021-02-06 18:14:30.00000000 +09:00
tag: 函数式编程 Swift
---
### 一、权责让渡
函数式思维的好处之一，是能够将底层次细节（如垃圾机制）的控制权移交给运行时，从而消除一大批注定会发生的程序错误。
下面将讲述向语言和运行时让渡控制权的五各种途径。

#### 迭代让位于高阶函数
用 map 等函数替换了迭代。用高阶函数把希望之星的操作表达出来，语言将会把操作安排得更高效。
{% highlight ruby %}
理解掌握的抽象层次永远要比日常使用的抽象层次更深一层
{% endhighlight %}

#### 二、闭包 closure
闭包是所有函数式语言都具备的一项平等特性。所谓闭包实际上是一种特殊的函数，它在暗地里绑定了函数内部引用的所有变量。
换句话说，这种函数把它引用的所有东西都放在一个上下文里“包”了起来。

闭包这个名字来源于创建封闭上下文的行为。虽然局部变量不是在代码块里定义的，但是只要代码块引用了改变量，两者就绑定在一起了，
这个联系在代码块实例的全生命周期都一直保持。

{% highlight ruby %}
func makeAdd() -> (() -> Int) {
  var x = 0;
    func add() -> Int {
      x += 1
      return x
    }
    return add
}
var c1 = makeAdd()
c1()
c1()
var c2 = makeAdd()
c2()
c1 is 3
c2 is 2
{% endhighlight %}

闭包还是推迟执行原则的绝佳样板。我们把代码绑定到闭包之后，可以推迟到适当的时机再执行闭包。

{% highlight ruby %}
抓住上下文，而非状态。
{% endhighlight %}

### 三、柯里化和函数的部分施用
柯里化 （currying） 和函数的部分（partial application）施用都是从数学里借用过来的编程语言技法。这两种技法以不同的面面出现在各种类型的语法里，
在函数式语言里尤为普遍。

柯里化和函数的部分施用都有能力操纵函数或方法的参数数目，一般是通过向一部分参数代入一个或多个默认值的办法来实现的。
{% highlight ruby %}
这部分参数称为 “固定参数”。
{% endhighlight %}

定义与辨析

柯里化是指从一个多参数函数变成一个连串单参数函数的变换。它描述的是变换的过程，不涉及变换后对函数的调用。
调用者可以决定对多少个参数实施变换，余下部分将衍生位一个参数数目较少的新函数。

部分施用指通过提前代入一部分参数值，使一个多参数得以省略部分参数，从而转换为一个参数数目较少的新函数。
顾名思义，也就是让函数先作用域其中一些参数，经过部分的求解，结果返回一个由余下参数构成签名的函数。

{% highlight ruby %}
def volume = { h, w, l -> h * w * l }
def area = volume.curry(1)
def lengthPA = volume.curry(1, 1)             部分实用
def lengthC = volume.curry(1).curry(1)        柯里化
{% endhighlight %}

柯里化和部分施用都是在我们提供部分参数值后，产出可以凭借余下参数实施调用的一个函数。
区别在于：
{% highlight ruby %}
柯里化的结果是返回链条中的下一个函数。
部分施用是把参数的取值绑定到用户在操作中提供的具体值上。而产生一个“元数（参数数目）”较少的函数。
{% endhighlight %}

函数式编程赋予我们另一套新的构造单元。
{% highlight ruby %}
复合（composition）是函数式语言拼组这些构造单元的一般方式。
{% endhighlight %}

### 四、递归
递归，按照维基百科的定义，是 “以一种自相似的方式来重复事物的过程”。

