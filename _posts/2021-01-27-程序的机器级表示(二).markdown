---
layout: post
title: ### 程序的机器级表示(二）
date: 2021-01-27 23:45:30.000000000 +09:00
tag: CSApp
---
### 数据格式
Intel 术语：
{% highlight ruby %}
8  位为 字节（b）
16 位数据类型为字（w）
32 位为双字（l）
64 位为四字（q）
{% endhighlight %}
#### C 声明          |    Intel 数据类型     |        汇编代码后缀         |     大小（字节）
{% highlight ruby %}
char      字节                   b            1
short     字                     w            2
int       双字                   l            4
long      四字                   q            8
char *    四字                   q            8
float     单精度                 s            4
double    双精度                 l            8
{% endhighlight %}

{% highlight ruby %}
大多数 GCC 生成汇编代码指令都有一个字符后缀表示操作数的大小，汇编代码也使用 l 表示 4 字节整数和 8 字节双精度
1 movb 传送字节 8 位
2 movw 传送字 16 位
3 movl 传送双字 32 位
4 movq 传送四字 64 位
{% endhighlight %}

### 访问信息
{% highlight ruby %}
一个 x86-64 的 CPU 包含一组 16 个存储 64 位值的通用目的寄存器，他们用了存储整数数据和指针
{% endhighlight %}
#### 指令可以对这个 16 个寄存器的低位字节中存放的不同大小的数据进行操作 字节级操作可以访问最低的字节
#### 指令会复制、和生成 1 字节、2 字节、4 字节和 8 字节值
{% highlight ruby %}
1 生成 1 字节和 2 字节数字的指令会保持剩下的字节不变
2 生成 4 字节的指令会把高位 4 个字节置为 0
{% endhighlight %}

#### 16 个整数寄存器 
{% highlight ruby %}
63               31        15     7
%rax             %eax      %ax    %al      返回值
%rbx             %ebx      %bx    %bl      被调用者保存
%rcx             %ecx      %cx    %cl      第 4 个参数
%rdx             %edx      %dx    %dl      第 3 个参数
%rsi             %esi      %si    %sil     第 2 个参数
%rdi             %edi      %di    %dil     第 1 个参数
%rbp             %ebp      %bp    %bpl     被调用者保存
%rsp             %esp      %sp    %spl     栈指针
%r8              %r8d      %r8w   %r8b     第 5 个参数
%r9              %r9d      %r9w   %r9b     第 6 个参数
%r10             %r10d     %r10w  %r10b    调用者保存
%r11             %r11d     %r11w  %r11b    调用者保存
%r12             %r12d     %r12w  %r12b    被调用者保存
%r13             %r13d     %r13w  %r13b    被调用者保存
%r14             %r14d     %r14w  %r14b    被调用者保存
%r15             %r15d     %r15w  %r15b    被调用者保存
{% endhighlight %}

#### 栈指针
{% highlight ruby %}
在常见的程序里不同的寄存器扮演不同的角色 其中最特别的是 %rsp 指明运行时栈的结束位置
{% endhighlight %}

#### 操作数指示符
大多数指令有一个或多个操作数，指示出执行一个操作中要使用的源数据值，以及放置结果的目的位置。
源数据值可以以常数形式给出或从寄存器或内存中读出。结果可以存放在寄存器或内存中。
不同的操作数分为三种：
1. 立即数，用来表示常数值，$后跟一个标准 C 表示的整数 例如 $0x1F
2. 寄存器，它表示某个寄存器的内容，用 r(a) 表示任意寄存器，用引用 R[r(a)] 表示它的值，这是将寄存器集合看成一个数组 R ，用寄存器标示符作为索引
3. 内存引用，他会根据计算出来的地址(通常称为有效地址)访问某个内存位置，因为将内存看成一个字节数组所以用 M(b)[Addr] 表示对存储在
内存中从地址 Addr开始 b 个字节值得引用。通常省略 b 为 M[Addr]

{% highlight ruby %}
多种不同寻址模式
Imm(rb, ri, s) 表示最常见的形式
1. Imm 立即数偏移
2. rb 基址寄存器，必须是 64 位寄存器
3. ri 变址寄存器，必须是 64 位寄存器
4. s 比例因子，s 必须是 1、2、4、8
有效地址为 Imm + R[rb] + R[ri] * s
{% endhighlight %}

{% highlight ruby %}
寄存器     值
%rax     0x100

地址        值
0x100     0xFF

%rax 的值为 0x100
(%rax) 的值为 0xFF
%rax 取地址，(%rax) 取地址的内容也就是值
{% endhighlight %}

### 例子
{% highlight ruby %}
操作数             | 值
%rax              0x100      寄存器
0x104             0xAB       绝对地址
$0x108            0x108      立即数
(%rax)            0xFF       间接地址 (0x100)->0xFF (取 rax 地址值对应的内容)
4(%rax)           0xAB       基址 + 偏移量  (4)0x4 + 0x100 = 0x104->0xAB
9(%rax, %rdx)     0x11       变址寻址 (9)0x9 + 0x100 + 0x3 = 0x10c->0x11
260(%rcx, %rdx)   0x13       变址寻址 (260)0x104 + 0x1 + 0x3 = 0x108->0x13
0xFC(, %rcx, 4)   0xFF       比例寻址 0xFC + 0x1 * 4 = 0x100->0xFF
(%rax, %rdx, 4)   0x11       比例寻址 0x100 + 0x3 * 4 = 0x10C->0x11
{% endhighlight %}

#### 数据传送指令
最频繁使用的指令是将数据从一个位置复制到另一个位置的指令，它们或者源和目的类型不同，或者执行的转换不同，
或者具有一些副作用
把许多不同指令划分为指令类，每一类中的指令执行相同的操作，只不过操作数大小不同 
### 例如，MOV 把数据从源位置复制到目的位置，不做任何变化。
{% highlight ruby %}
movb    传送字节    1
movw    传送字      2
movl    传送双字    4
movq    传送四字    8
{% endhighlight %}
源操作数可以是立即数、寄存器、内存地址。目的操作数是寄存器或内存地址
{% highlight ruby %}
x86-64 有个限制 将一个值从内存位置复制到另一个内存位置需要两条指令，第一条指令将源值加载到寄存器，第二条将寄存器值写入目的位置。寄存器大小必须与 mov 末尾的字符（b、w、l、q）一致。
mov 指令只会更新目的操作数指定的那个寄存器字节或内存位置。唯一例外的是 movl 以寄存器作为目的时，会把该寄存器高位 4 字节设置为 0 这是 x86-64 的惯例，即任何寄存器生成 32 位指令都会把该寄存器高位部分设置成 0
{% endhighlight %}
movabsq 能以任意 64 位立即数作为源操作数，并且只能以寄存器作为目的
常规 mov 指令只能以 32 位补码数字的立即数作为源操作数，然后把这个值符号扩展到 64 位的值放到目的位置

#### 将较小的源值复制到较大的目的使用指令 MOVZ、MOVS，把数据从源（寄存器或内存）复制到目的寄存器
#### MOVZ 类中指令把目的中剩余的字节填充为 0，movzbw，结尾 b 表示源大小，w 表示目的大小
#### MOVS 类中指令通过符号扩展来填充把源操作的最高位进行复制
#### cltq 指令总是以 %eax 作为源 %rax 作为目的 它的效果与 movslq %eax, %rax 一样

{% highlight ruby %}
所谓 C 指针其实 就是地址，间接引用指针就是" 将指针放在一个寄存器中 然后在内存引用中使用这个寄存器
long *xp 的, *xp 就是 (%rdi), xp 地址放在 %rdi 中, * 就是间接引用
{% endhighlight %}

### 压入和弹出栈
通过 push 操作将数据压入程序栈中
通过 pop 操作从程序栈中弹出数据(删除数据)，弹出的值永远是最近被压入而且乃然在栈中的值
栈可以实现为一个数组，总是从数组一端插入和删除元素 这一端被称为栈顶
栈向下增长，栈顶元素地址是所有栈中地址中最低的
在 x86-64 中 栈向低地址方向增长，所以压栈是减小栈指针 %rsp 的值 并将数据存放到内存中，
出栈是从内存中读数据 并增加栈指针的值.
{% highlight ruby %}
%rsp 保存着栈顶元素地址
{% endhighlight %}

### 当 %rsp 为 0x108，%rax 为 0x123 时

#### 压入
执行 pushq %rbp ，将一个 4 字值压入栈中 首先将栈指针减 8 (0x108->0x100) 得到 0x100，然后将 0x123 存入0x100位置
pushq 一个字节，上边的两步是 8 个字节。
因此 pushq %rbp 行为等于
1. subq $8, %rsp          减 8 栈指针
2. movq %rbp, (%rsp)      将值存到栈顶


#### 弹出
弹出一个 4 字的操作包括从栈顶位置读出数据，然后将栈指针 (%rsp) 加 8。
popq %rdx ，首先从内存读出 0x123 的值，再写到寄存器 rdx，然后 %rsp 的值将增加回到 0x108。
{% highlight ruby %}
值 0x123 仍然会保存在内存位置 0x100 位置 直到被覆盖，%rsp 总是指向栈顶
{% endhighlight %}
因此 popq %rdx 等价于以下步骤
1. movq (%rsp), %rax    读取 %rax 从栈中
2. addq $8, %rsp        加 8 栈指针






























