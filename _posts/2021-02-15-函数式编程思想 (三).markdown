---
layout: post
title: ### 函数式编程思想(三)
date: 2021-02-15 18:14:30.00000000 +09:00
tag: 函数式编程
---
### 记忆
指在函数级别上对需要多次使用的值进行缓存的机制。只有纯函数才可以适用缓存技术。纯函数是没有副作用的函数，它不引用其他值可变的类字段。只有在函数对同一组参数总返回相同结果的前提下，才可以放心的使用缓存技术。

缓存是用内存换时间的。但需要考虑缓存的最大上限，以免出现内存问题。例如苹果的 NSCache 类是可以设置上限的。
{% highlight ruby %}
class Squares {
  var cache: [Int:Int] = [:]
  func perimeter(length: Int) -> Int {
    if !cache.contains(where: { (key, value) -> Bool in
      return key == length
    }) {
      cache[length] = length * 4
      print("length is \(length)");
    }
    return cache[length]!
  }
}
{% endhighlight %}

所有跟缓存打交道的方法都不能是静态的。

{% highlight ruby %}
被记忆的内容应该是值不可变得，这一点非常重要。
{% endhighlight %}

请保证所有被记忆的函数：
{% highlight ruby %}
1 没有副作用
2 不依赖任何外部信息
{% endhighlight %}


### 缓求值 （lazy evaluation）
缓求值是函数式编程语言常见的一种特性，指尽可能地推迟求解表达式。缓求值的集合不会预先算好所有结果，而是在用到的时候才计算，这样做的好处：
{% highlight ruby %}
1 昂贵的运算只有到了绝对必要的时候才执行
2 我们可以建立无限大的集合，只有一直接到请求，就一直送出元素
3 按缓求值的方式来使用映射、筛选等函数式概念，可以产生更高效的代码
{% endhighlight %}


### 演化的语言
面向对象喜欢大量地建立有很多操作的各种数据结构，函数式语言也有很多的操作，但对应的数据结构却很少。
函数式语言的重用表现在函数的通用性上，它们鼓励在数据结构上使用各种共通的变换。
{% highlight ruby %}
100 个函数操作一个数据结构的组合，要好过 10 个函数操作 10 种数据结构的组合。
{% endhighlight %}

在 OOP 的世界里，开发者被鼓励针对具体的问题建立专门的数据结构，并以方法的形式，将专门的操作关联在数据结构上。
函数式语言选择了另一个种重用思路，它们用很少的一组关键数据结构（如 list、set、map）来搭配专为这些数据结构深度优化过的操作。比起在定制类结构上做文章，把封装的单元缩小到函数级别，有利于在更基础的层面上更细粒度地实施重用。

#### 让语言去迎合问题
例如 Ruby 对领域专用语言（DSL）的支持旧比主流语言要强的多。

#### 对分发机制的再考虑
条件控制，除了很少一些情况适用 switch 语句，大多都离不开 if 语句。

#### 运算符重载
是函数式语言常见特性，它允许我们重新定义运算符(如 +、-、*)，使之适用于新的类型，并承载新的行为。

#### 函数式的数据结构
异常，违背了大多数函数式语言所遵循的一些前提条件，首先，函数式语言偏好没有副作用的纯函数，抛出异常的行为本身就是一种副作用，会导致程序路径偏离正轨，进入异常的流程。

引用的透明性是函数式语言重视的另一个性质：
{% highlight ruby %}
发出调用的例程不必关心它的访问对象真的是一个值，还是一个返回值函数。可是如果函数有可能抛出异常，用它来代替值就不再是安全的了。
{% endhighlight %}

#### Either 类
函数式语言经常会遇到返回两种截然不同的值的需求，它们用来建模这种行为的常用数据结构是 Either 类。
Either 的设计归档了它要么持有“左值”，要么持有“右值”，但绝对不会同时持有两者。这种数据结构也被称为不相交联合体（disjoint union）。C 语言和一些衍生语言中有一种联合体（union）数据结构，能够在同一个位置上容纳不同类型的单个实例。不相交联合体为两种类型实例都准备了位置，但只会持有其中一个种类型的单个实例。

按照函数式编程的传统习惯，异常（如果有的话）置于 Either 类的左值，正常结果则放在右值。

swift 实现 Either
{% highlight ruby %}
struct Either<T, U> {
  private var left_: T? = nil
  private var right_: U? = nil
  
  init(left: T?, right: U?) {
    left_ = left
    right_ = right
  }
  
  func left() -> T? {
    return left_
  }
  
  func right() -> U? {
    return right_
  }
  
  func isLeft() -> Bool {
    return left_ != nil
  }
  
  func isRight() -> Bool {
    return right_ != nil
  }
  
  static func leftInstance(left: T?) -> Either<T, U> {
    return Either.init(left: left, right: nil)
  }
  
  static func rightInstance(right: U?) -> Either<T, U> {
    return Either.init(left: nil, right: right)
  }
}
{% endhighlight %}

#### Option 类
有些语言除了 Either 还存在另一个选项即 Option 。Option 类表示了异常处理中较为简化的一种场景，它的取值要么是 none，表示不存在有效值，要么是 some，表示成功返回。

Option 类可以近似的看作 Either 类的一个子集，Option 类一般表示成功和失败两种情况，而 Either 可以容纳任意内容。

#### 函数式语言中的设计模式
传统的设计模式在函数式编程的世界里大致有三种归宿

{% highlight ruby %}
1 模式已被吸收成为语言的一部分。
2 模式中描述的解决方法在函数式范式下依然成立，但实现细节有所变化。
3 由于在新的语言或范式下获得了原本没有的能力，产生了新的解决方案（例如很多问题可以用元编程干净利落的解决）
{% endhighlight %}

#### 复合
复合作为一种重用机制，在函数式语言中主要表现为通过参数来传递作为第一等语言成分的函数，各个函数式编程语言都频繁的运用了这种手段。与面向对象语言相比，函数式语言的重用发生于较粗颗粒度级别上，着眼于提取一些共通的运作机制，并参数化地调整其行为。

#### 架构
函数式的架构从根本上贯彻了“值不可变”的思路。
{% highlight ruby %}
学会从值不可变的角度去思考，是掌握函数式编程思维方法一条重要途径。
值不可变的对象天生就是线程安全的。
{% endhighlight %}










