---
layout: post
title: ### 2021-03-28-程序的机器级表示(四)-控制
date: 2021-03-28 15:45:30.000000000 +09:00
tag: CSApp
---

目前为止，我们只考虑直线代码行为，也就是指令一条接着一条的顺序的执行。C 语言中某些结构如条件语句、循环语句、分支语句，根据测试数据的结果决定操作执行的顺序。机器代码提供两种基本的低级机制来实现有条件的行为: 测试数据值，然后根据测试结果改变控制流或数据流。jump 指令可以改变一组机器代码指令的执行顺序，jump 指令指定控制应该被传递到程序的某个其他部分，可能是依赖于某个测试结果。编译器必须产生构建在这种低级机制基础之上的指令序列来实现 c 语言的控制结构。%r8 - %r15 新引入的寄存器，其他 8 个适用于 x86 旧框架。

{% highlight ruby %}
最特殊的是 %rsp 寄存器是栈指针，它能告诉你程序执行到哪了
%rip 含义是指针 instruction pointer, 它包含当前正在执行指令的地址
{% endhighlight %}

### 条件码
除了整数寄存器，CPU 还维护着一组单个位的条件码寄存器，它们描述了最近的算术或逻辑操作属性，根据其他指令操作后结果设置的，可以检测这些寄存器来执行条件分支指令
1. CF: Carry Flag  进位标志 表示无符号数运算溢出的位
2. ZF: Zero Flag  零标志 最近的操作得出的结果为 0
3. SF: Sign Flag  符号标志 最近的操作得到的结果为负数，即运算结果最高有效位为 1, SF 会被置为 1
4. OF: Overflow Flag  溢出标志 最近的操作导致一个补码溢出--正溢出或负溢出，即有符号数运算溢出的位，如果操作数的符号相同，但结果的符号与操作数符号不同

例如： t = a + b，a b t 都是整型然后下面 C 表达式来设置条件码
 1. CF: (unsigned) t < (unsigned) a         无符号溢出
 2. ZF: t == 0                              零
 3. SF: t < 0                               负数
 4. OF: (a<0==b<0) && (t<0 !=a<0)           有符号溢出

{% highlight ruby %}
leaq 指令不改变任何条件码，即不会设置这四个标志位，因为它是用来进行地址计算的。
{% endhighlight %}

上一篇列出的 INC、DEC、NEG、NOT 等指令都会设置条件码。例如 XOR 进位标志和溢出标志会设置为 0。对于位移操作进位标志将设置为最后一个被移出的位，而溢出标志设置为 0。INC、DEC 指令会设置溢出和零标志，但是不会改变进位标志。

除了这些指令会设置条件码，还有两类指令(有8，16，32，64位形式) 只设置条件码而不改变任何其他寄存器。
1. CMP 指令根据两个操作数之差来设置条件码，除只设置条件码而不更新寄存器外（不改变操作数只根据结果设置条件码） CMP 指令与 SUB 指令行为是一样的，在 ATT 格式中，列出操作数的顺序是相反的，如果两个操作数相等，这些指令会将零标志设置为 1，其他的标志可以用来确定两个操作数之间的大小关系。cmpb、cmpw、cmpl、cmpq
2. TEST 指令与 AND 指令一样，典型用法两个操作数是一样的，如 testq %rax, %rax 用来检测 %rax 是负数、0 还是正数，或其中一个操作数是掩码，用来指示哪些位应该被测试。testb、testw、testl、testq


{% highlight ruby %}
当你有俩值想比较他们用 CMP，当你有一个值想看它的情况用 TEST
请记住，在 Linux 下机器代码中编写参数的方式与你预期相反
{% endhighlight %}

### 访问条件码
条件码通常不会直接读取，常用的使用方法有三种：
1. 可以根据条件码的某种组合，将一个字节设置为 0 或 1，我们将这一整类指令称为 SET。它们之间的区别在于它们考虑的条件码组合是什么，这些指令的后缀指明了它们所考虑的条件码组合，这些指令后缀表示不同的条件而不是操作数大小。了解这些很重要。例如指令 setl 和 setb 表示小于时设置 set less 即 setl，低于时设置 set below 即 setb，而不是设置长字和设置字节。一条 SET 指令的目的操作数是低位单字节寄存器元素之一（如 %al、%bl 等）， 或是一个字节的内存位置，指令会将这个字节设置为 0 或 1。
2. 可以条件跳转到程序的某个其他的部分
3. 可以有条件的传送数据

SET 指令根据条件码的某个组合将单个寄存器的单个字节设置为 0 或 1
{% highlight ruby %}
指令             同义名         效果                        设置条件
sete   D        setz          D<- ZF                      相等/零 
setne  D        setnz         D<- ~ZF                     不等/非零

sets   D                      D<- SF                      负数
setns  D                      D<- ~SF                     非负数

setg   D        setnle        D<- ~(SF ^ OF) & ~ZF        大于(有符号>)
setge  D        setnl         D<- ~(SF ^ OF)              大于等于(有符号>=)
setl   D        setnge        D<- SF ^ OF                 小于(有符号<)
setle  D        setng         D<- (SF ^ OF) | ZF          小于等于(有符号<=)

seta   D        setnbe        D<- ~CF & ~ZF               超过(无符号>)
setae  D        setnb         D<- ~CF                     超过或相等(无符号>=)
setb   D        setnae        D<- CF                      低于(无符号<)
setbe  D        setna         D<- CF | ZF                 低于或相等(无符号<=)
{% endhighlight %}

### 如何设置 1 个字节
16 个寄存器可以把其最低 1 位字节设置为 0 或 1，而这一行为不会影响该寄存器的其他 7 个字节


一个 C 语言表达式 a < b 典型指令
{% highlight ruby %}
a < b
int comp(data_t a, data_t b)
a in %rdi, b in %rsi
comp:
cmpq     %rsi,%rdi            compare a:b
setl     %al                  set low-order byte of %eax to 0 or 1 将 rax 最低 1 字节 设置为 条件值
movzbl   %al, %eax            clear rest of %eax (and rest of %rax)  将 rax 其他 7 个字节设置为 0
ret
movzbl 指令不仅会把 %eax 的高3个字节清零，还会把寄存器 %rax 高 4 个字节都清零。底层机器指令可能有多个名字·，称为同义名 setg 表示“设置大于” 和 setnle 表示“设置不小于等于” 就是同一个指令。
{% endhighlight %}

对于无符号比较，CMP 指令会设置进位标志，因而无符号比较使用的是进位标志和零标志的组合。注意到机器代码如何区分有符号和无符号是很重要的，同 C 语言不通机器代码不会将每个程序值都和一个数据类型联系起来，相反大多情况机器代码对于有符号和无符号都使用一样的指令，这是因为许多算术运算对无符号和补码算术都有一样的位级行为。有些情况要用不同指令处理有符号和无符号操作，如不同版本的右移、除法、乘法等。

{% highlight ruby %}
汇编代码不会记录程序值的类型，理解这点很重要。不同指令确定操作数的大小以及是有符号还是无符号。
{% endhighlight %}

例如下边汇编代码确定 a 的类型
{% highlight ruby %}
int test(data_t a) {
return a TEST 0
}
testq  %rdi, %rdi
setge  %al

解析：testq 确定是 64 位操作，a 应该是 64 位的，setge 表示对有符号的比较所以 a 可能类型是 long
{% endhighlight %}

### 跳转指令
无条件跳转意味着当我想跳转时就可以跳转，有条件跳转当条目满足时才跳转。

跳转 jump 指令会导致执行切换到程序中一个全新的位置。在汇编代码中，这些跳转目的地通常用一个标号（label）指明。
{% highlight ruby %}
movq  $0, %rax              set %rax to 0
jmp   .L1                   goto .L1
movq (%rax), %rdx           Null pointer dereference (skipped)
.L1
popq %rdx                   Jump target
{% endhighlight %}
指令 jmp .L1 会导致程序跳过 movq 指令，而从 popq 指令开始继续执行。在产生目标代码文件时，汇编器会确定所有带标号指令的地址，并将跳转目标(目的指令的地址)编码为跳转指令的一部分。

{% highlight ruby %}
jmp 指令是无条件跳转，可以直接跳转，即跳转目标是作为指令的一部分编码，也可以是间接跳转，即跳转目标是从寄存器或内存位置中读出的。
{% endhighlight %}

#### 直接跳转/间接跳转
1. 直接跳转时给出一个标号作为跳转目标的，例如上边代码 .L1 

2. 间接跳转的写法是 * 后边跟一个操作指示符，例如 jmp *%rax 以寄存器 %rax 中的值作为跳转目的。而  jmp *(%rax) 以读 %rax 中的值（地址）从内存中读出跳转目的。

{% highlight ruby %}
指令              同义名    跳转条件           描述
jmp  Label                 1                直接跳转
jmp  *Operand              1                间接跳转

je   Label        jz       ZF               相等/零 
jne  Label        jnz     ~ZF               不等/非零


js   Label                 SF               负数
jns  Label                ~SF               非负数

jg   Label        jnle   ~(SF ^ OF) & ~ZF   大于(有符号>)
jge  Label        jnl    ~(SF ^ OF)         大于等于(有符号>=)
jl   Label        jnge     SF ^ OF          小于(有符号<)
jle  Label        jng     (SF ^ OF) | ZF    小于等于(有符号<=)

ja   Label        jnbe    ~CF & ~ZF         超过(无符号>)
jae  Label        jnb     ~CF               超过或相等(无符号>=)
jb   Label        jnae     CF               低于(无符号<)
jbe  Label        jna      CF | ZF          低于或相等(无符号<=)
{% endhighlight %}
上表中其他跳转指令都是由条件的，它们根据条件码的某种组合，或跳转或继续执行代码序列中的下一条指令。

### 跳转指令编码
理解跳转指令目标如何编码对研究链接非常重要，同时也能帮助我们理解反汇编的输出。

跳转指令有几种不同的编码，最常用的都是 PC 相对的(PC-relative)
1. 它们会将目标指令地址与紧跟在跳转指令后面那条指令的地址之间的差作为编码，这些地址偏移量可以编码为 1、2、4个字节
2. 给出绝对地址，用 4 个字节直接指定目标，汇编器和链接器会选择适当的跳转目的编码

{% highlight ruby %}
0:  48 89 f8     mov %rdi, %rax
3:  eb 03        jmp 8 <loop+0x8>
5:  48 d1 f8     sar %rax
8:  48 58 c0     test %rax, %rax
b:  7f f8        jg    5 <loop+0x5>
d:  f3 c3        repz retq
{% endhighlight %}
观察指令的字节编码，会看到第一条跳转指令的目标编码为 0x3，把它加上 0x5 就是目的跳转地址 0x8 就是第四行的指令
{% highlight ruby %}
当执行 PC 相对寻址时，程序计数器的值是跳转指令后面那条指令的地址，而不是跳转指令本身的地址
{% endhighlight %}
指令 repz 是 rep 的同义名，retq 是 ret 的同义名, 遇到 repz 或 rep 可以忽视它们。

### 用条件控制来实现条件分支
{% highlight ruby %}
GCC 产生如下汇编代码
long test(long x, long y, long z)
x in %rdi, y in %rsi, z in %rdx
test:
   leaq (%rdi, %rsi), %rax
   addq %rdx, %rax
   cmpq $-3, %rdi
   jge  .L2
   cmpq %rdx, %rsi
   jge  .L3
   movq %rdi, %rax
   imulq %rsi, %rax
   ret
.L3:
   movq %rsi, %rax
   imulq %rdx, %rax
   ret
.L2:
   cmpq $2, %rdi
   jle  .L4
   movq %rdi, %rax
   imulq %rdx, %rax
.L4:
   rep; ret
  
C 代码
long test(long x, long y, long z) {
    long val = x + y + z
    if x < -3 {
      if y < z {
         val = x * y
      } else {
         val = y * z
      }
  } else if x > 2 {
      val = x * z  
  }
  return val
}
{% endhighlight %}

### 用条件传送来实现条件分支
用条件控制实现跳转可能会非常低效，替代策略是使用数据的条件转移。这种方法计算一个条件操作的两种结果，然后再根据条件是否满足从中选取一个。只有在一些受限制的情况中，这种策略才可行，但如果可行，就可以用一条简单的条件传送指令来实现它，条件传送指令更符合现代处理器的性能特性。
{% highlight ruby %}
条件数据传送要比条件控制转移代码性能更好
{% endhighlight %}

处理器通过使用流水线(pipelining) 来获得高性能，在流水线中一条指令处理要经过一系列阶段，每个阶段执行所需操作的一小部分，这种方法通过重叠连续指令的步骤来获得高性能。以上都是在正确命中预测跳转的前提下，若出现错误预测会导致很严重的性能问题，大约浪费 15-30 个时钟周期。

无论测试数据是什么，编译出来使用条件传送的代码所需的时间大都是 8 个时钟周期。
{% highlight ruby %}
若没有错误预测，执行代码时间是 T(ok) ，出现错误预测时代码执行时间是 T(mp) , 模式使随机时候时间是 T(ran) 
则 T(mp) = 2 * (T(ran) -  T(ok) )
{% endhighlight %}

条件传送指令
{% highlight ruby %}
指令                 同义名         传送条件                 描述
cmove   S, R        cmovz          ZF                     相等/零 
cmovne  S, R        cmovnz        ~ZF                     不等/非零

cmovs   S, R                       SF                     负数
cmovns  S, R                      ~SF                     非负数

cmovg   S, R        cmovnle      ~(SF ^ OF) & ~ZF         大于(有符号>)
cmovge  S, R        cmovnl       ~(SF ^ OF)               大于等于(有符号>=)
cmovl   S, R        cmovnge        SF ^ OF                小于(有符号<)
cmovle  S, R        cmovng        (SF ^ OF) | ZF          小于等于(有符号<=)

cmova   S, R        cmovnbe       ~CF & ~ZF               超过(无符号>)
cmovae  S, R        cmovnb        ~CF                     超过或相等(无符号>=)
cmovb   S, R        cmovnae        CF                     低于(无符号<)
cmovbe  S, R        cmovna         CF | ZF                低于或相等(无符号<=)
{% endhighlight %}

以上每条指令都有两个操作数，源寄存器或内存地址 S ，和目的寄存器 R。同 SET 指令一样这些指令的结果取决于条件码的值，只有在指定条件满足时才会被复制到目的寄存器。

{% highlight ruby %}
源和目的的值可以是 16、32 位或 64 位，不支持单字节的条件传送。
{% endhighlight %}

编译器可以从目标寄存器的名字推断出条件传送指令的操作数长度。所以对所以操作数长度，都可以使用同一个指令名称。

{% highlight ruby %}
同条件跳转不同，处理器无需预测测试的结果就可以执行条件传送。
处理器只是读源值，检测条件码然后要么更新目的寄存器，要么保持不变。
{% endhighlight %}

不是所有条件表达式都可以用条件传送来编译。使用条件传送也不总是高效率的，如果 then-expr 或 else-expr 的求值需要大量计算，那么当条件不满足时，这些工作就白费了。
{% highlight ruby %}
只在计算简单并且没有副作用时，才会使用条件传送
{% endhighlight %}

{% highlight ruby %}
long test(long x, long y) 
x in %rdi, y in %rsi
test:
  leaq  0(, %rdi, 8), %rax
  testq %rsi, %rsi
  jle   .L2
  movq %rsi, %rax
  subq %rdi, %rax
  movq %rdi, %rdx
  andq %rsi, %rdx
  cmpq %rsi, %rdi
  cmovge %rdx, %rax
  ret
.L2:
  addq %rsi, %rdi
  cmpq $-2, %rsi
  cmovle %rdi, %rax
  ret
  
long test(long x, long y) {
  long val = 8x
  if y > 0 {
    if x < y {
       val = y - x
    } else {
       val = x & y
    }
  } else if y < -2 {
    val = x + y
  }
  return val
}
{% endhighlight %}

### 条件控制和条件传送区别

{% highlight ruby %}
                        模式                 执行
条件控制              if (test-expr)                 只执行一个分支
                        then-expr
                     else 
                        else-expr


条件传送              v = then-expr                  分支都执行
                     ve = else-expr
                     t = test-expr
                     if (!t) v = ve
{% endhighlight %}

Tips：
{% highlight ruby %}
%rax 可以作为返回值寄存器
{% endhighlight %}

## 循环
汇编中没有相应的循环指令存在，可以用条件测试和跳转组合起来实现循环的效果。
### do-while
{% highlight ruby %}
do
  body-statement
  while (test-expr)
{% endhighlight %}


goto 版本
{% highlight ruby %}
loop: 
    body-statement
    t = test-expr
    if (t) 
      goto loop;
{% endhighlight %}

{% highlight ruby %}
理解产生的汇编代码与原始源代码之间的关系，关键是找到程序值和寄存器之间的映射关系。
{% endhighlight %}

### while 
有很多中方法将 while 翻译成机器代码，GCC 使用其中两种
第一种叫跳转的到中间，它执行一个无条件跳转跳到循环结尾处的测试，以此来执行初始的测试。GCC 的 -Og 选择会使用这个策略。
{% highlight ruby %}
goto test;       // 先跳转则是跳转的到中间
loop: 
    body-statement
test:
    t = test-expr
    if (t) 
      goto loop;
{% endhighlight %}

第二种叫 guarded-do，首先用条件分支，如果初始条件不成立就跳过循环，把代码变换位 do-while 循环。GCC 的 -O1 选择会使用这个策略。
{% highlight ruby %}
t = test-expr
if (!t) 
  goto done;
loop: 
    body-statement
    t = test-expr
    if (t) 
      goto loop;
done:
{% endhighlight %}

### for
{% highlight ruby %}
for (init-expr; test-expr; update-expr)
  body-statement
{% endhighlight %}

转成 while 版本
{% highlight ruby %}
init-expr
while (test-expr) {
  body-statement
  update-expr
}
{% endhighlight %}

GCC 为 for 循环产生的代码是 while 两种翻译之一，这取决于优化等级。

跳转到中间策略的 goto 代码
{% highlight ruby %}
init-expr
goto test
loop:
  body-statement
  update-expr
test:
  t = test-expr
  if (t)
    goto loop
{% endhighlight %}

guarded-do 版本
{% highlight ruby %}
init-expr
t = test-expr
if (!t)
  goto done
loop:
  body-statement
  update-expr
  t = test-expr
  if (t)
    goto loop
done:
{% endhighlight %}

### 循环中出现 continue 的处理
{% highlight ruby %}
long sum = 0;
long i;
for (i = 0; i<10; i++) {
  if (i & 1) {
    continue;
  }
  sum += 1;
}
{% endhighlight %}

转为 while 错误例子，因为没有改变 i 的值这将会是一个无限循环
{% highlight ruby %}
long sum = 0;
long i = 0;
while (i < 10) {
  if (i & 1) {
    continue;
  }
  sum += 1;
  i++;
}

{% endhighlight %}

解决方法是使用 goto
{% highlight ruby %}
long sum = 0;
long i = 0;
while (i < 10) {
  if (i & 1) {
    goto update;
  }
  sum += 1;
update:
  i++;
}
{% endhighlight %}

## Switch
不仅提高了 C 代码可读性，而且通过使用跳转表（jump table）这种数据结构使得实现更加高效。跳转表示一个数组，表项 i 是一个代码段地址，这个代码段实现当前 switch 索引值等于 i 时程序应该采取的行动。程序代码用于 switch 索引值来执行一个跳转表内的数组引用，确定跳转指令的目标。和使用一组很长的 if-else 语句相比，使用跳转表的优点是执行 switch 语句的时间与 switch case 数量无关。当 switch case 数量在 4 个以上，并且值的范围跨度比较小时就会使用跳转表。

switch 语句示例代码
{% highlight ruby %}
void switch_eg(long x, long n, long *dest) {
  long val = x;
  switch(n) {
  case 100: 
      val *= 13;
      break;
      case 102: 
          val += 10;
      case 103: 
          val *= 11;
          break;
      case 104: 
      case 106: 
          val *= val;
          break;
      default: 
          val = 0;
  }
  *dest = val;
}
{% endhighlight %}

翻译到扩展 c 代码
{% highlight ruby %}
void switch_eg_impl(long x, long n, long *dest) {
static void *jt[7] = {
&&loc_A, &&loc_def, &&loc_B, &&loc_C, &&loc_D, &&loc_def, &&loc_D,
}

unsigned long index = n - 100;
long val;
if index > 6 
  goto loa_def;
  goto *jt[index]

&&loc_A:
  val *= 13;
  goto done;
  
&&loc_B:
  val += 10;
  // fall through

&&loc_C:
  val += 11;
  goto done;

&&loc_D:
  val *= val;
  goto done;

&&loc_def:
  val = 0;

done:
  *dest = val;
}
&& 创建一个指向代码位置的指针。
{% endhighlight %}

汇编代码
{% highlight ruby %}
x in %rdi, n in %rsi, dest in %rdx
switch_eg:
  subq  $100, %rsi                    比计算 index = n - 100
  cmpq $6, %rsi                       比较 index ：6
  ja   .L8                            if > goto loc_def
  jmp   *.L4(, %rsi, 8)               goto *jt[index]
.L3                                   loc_A:
  leaq (%rdi, %rdi, 2), %rax          3 * x
  leaq (%rdi, %rax, 4), %rdi          val = 13 * x
  jmp .L2                             goto done
.L5                                   loc_B:
  addq $10, %rdi                       x = x + 10
.L6                                   loc_C:
  addq $11, %rdi                      val = x + 11
  jmp   .L2                           goto done
.L7                                   loc_D:
 imulq %rdi, %rdi                     val = x * x
 jmp  .L2                             goto done
.L8                                   loc_def:
 movl $0, %edi                        val = 0
.L2                                   done:
 movq %rdi, (%rdx)                    *dest = val
ret                                   return

jmp *.L4(, %rsi, 8)     jmp 指令的操作数有个 * 表明这是一个间接跳转，操作数指定一个内存位置。
{% endhighlight %}

跳转表，标号 .L4 标记了整个分配地址的起始
{% highlight ruby %}
.section  .rodata        只读数据的目标代码文件的段中
.align 8           align address to multiple of 8   
.L4    
.quad  .L3     Case 100: loc_A
.quad  .L8     Case 101: loc_def
.quad  .L5     Case 102: loc_B
.quad  .L6     Case 103: loc_C
.quad  .L7     Case 104: loc_D
.quad  .L8     Case 105: loc_def
.quad  .L7     Case 106: loc_D

{% endhighlight %}

#### 小结
先确定最大最小标号，再根据跳转表索引逐个定位
switch 遗漏 case 就是 default case
1. cmpq $7, %rdi, 则最大标号是 7 ，最小标号是 0
2. addq $1, %rdi ; cmpq $8, %rdi 则 x + 1 = 0，最小标号位 -1，


